/*SELECT choice.name, choice_question.question, choice_question.answer from choice, choice_question, choice_list
where choice.id = choice_list.id_choice and choice_question.id = choice_list.id_question*/

/*page*/
    CREATE TABLE public.page
    (
        id serial NOT NULL,
        name text,
        content text,
        PRIMARY KEY (id)
    );
    
    ALTER TABLE IF EXISTS public.page
        OWNER to postgres;




/*choice*/
    CREATE TABLE public.choice
    (
        id serial NOT NULL,
        name text,
        PRIMARY KEY (id)
    );
    
    ALTER TABLE IF EXISTS public.choice
        OWNER to postgres;
    
    CREATE TABLE public.choice_question
    (
        id serial NOT NULL,
        question text,
        answer integer,
        PRIMARY KEY (id)
    );
    
    ALTER TABLE IF EXISTS public.choice_question
        OWNER to postgres;
    
    CREATE TABLE public.choice_list
    (
        id_choice integer NOT NULL,
        id_question integer NOT NULL,
        PRIMARY KEY (id_choice, id_question),
        FOREIGN KEY (id_choice)
            REFERENCES public.choice (id) MATCH SIMPLE
            ON UPDATE CASCADE
            ON DELETE CASCADE
            NOT VALID,
        FOREIGN KEY (id_question)
            REFERENCES public.choice_question (id) MATCH SIMPLE
            ON UPDATE CASCADE
            ON DELETE CASCADE
            NOT VALID
    );
    
    ALTER TABLE IF EXISTS public.choice_list
        OWNER to postgres;




/*book*/
    CREATE TABLE public.book
    (
        id serial NOT NULL,
        name text,
        PRIMARY KEY (id)
    );
    
    ALTER TABLE IF EXISTS public.book
        OWNER to postgres;

    CREATE TABLE public.book_chapter
    (
        id serial NOT NULL,
        name text,
        content text,
        PRIMARY KEY (id)
    );
    
    ALTER TABLE IF EXISTS public.book_chapter
        OWNER to postgres;

    CREATE TABLE public.book_list
    (
        id_book integer NOT NULL,
        id_chapter integer NOT NULL,
        PRIMARY KEY (id_chapter, id_book),
        FOREIGN KEY (id_book)
            REFERENCES public.book (id) MATCH SIMPLE
            ON UPDATE CASCADE
            ON DELETE CASCADE
            NOT VALID,
        FOREIGN KEY (id_chapter)
            REFERENCES public.book_chapter (id) MATCH SIMPLE
            ON UPDATE CASCADE
            ON DELETE CASCADE
            NOT VALID
    );
    
    ALTER TABLE IF EXISTS public.book_list
        OWNER to postgres;




/*feedback*/
    CREATE TABLE public.feedback
    (
        id serial NOT NULL,
        name text,
        PRIMARY KEY (id)
    );
    
    ALTER TABLE IF EXISTS public.feedback
        OWNER to postgres;

    CREATE TABLE public.feedback_question
    (
        id serial NOT NULL,
        question text,
        PRIMARY KEY (id)
    );
    
    ALTER TABLE IF EXISTS public.feedback_question
        OWNER to postgres;

    CREATE TABLE public.feedback_answer
    (
        id serial NOT NULL,
        answer text,
        PRIMARY KEY (id)
    );
    
    ALTER TABLE IF EXISTS public.feedback_answer
        OWNER to postgres;

    CREATE TABLE public.feedback_question_list
    (
        id_feedback integer NOT NULL,
        id_question integer NOT NULL,
        PRIMARY KEY (id_feedback, id_question),
        FOREIGN KEY (id_feedback)
            REFERENCES public.feedback (id) MATCH SIMPLE
            ON UPDATE CASCADE
            ON DELETE CASCADE
            NOT VALID,
        FOREIGN KEY (id_question)
            REFERENCES public.feedback_question (id) MATCH SIMPLE
            ON UPDATE CASCADE
            ON DELETE CASCADE
            NOT VALID
    );
    
    ALTER TABLE IF EXISTS public.feedback_question_list
        OWNER to postgres;

    CREATE TABLE public.feedback_answer_list
    (
        id_question integer NOT NULL,
        id_answer integer NOT NULL,
        PRIMARY KEY (id_question, id_answer),
        FOREIGN KEY (id_question)
            REFERENCES public.feedback_question (id) MATCH SIMPLE
            ON UPDATE CASCADE
            ON DELETE CASCADE
            NOT VALID,
        FOREIGN KEY (id_answer)
            REFERENCES public.feedback_answer (id) MATCH SIMPLE
            ON UPDATE CASCADE
            ON DELETE CASCADE
            NOT VALID
    );
    
    ALTER TABLE IF EXISTS public.feedback_answer_list
        OWNER to postgres;

/*forum*/
    CREATE TABLE public.forum
    (
        id serial NOT NULL,
        name text,
        PRIMARY KEY (id)
    );
    
    ALTER TABLE IF EXISTS public.forum
        OWNER to postgres;

    CREATE TABLE public.forum_comment
    (
        id serial NOT NULL,
        answered_id integer,
        user_id integer,
        content text,
        PRIMARY KEY (id)
    );
    
    ALTER TABLE IF EXISTS public.forum_comment
        OWNER to postgres;

    CREATE TABLE public.forum_comment_list
    (
        id_forum integer NOT NULL,
        id_comment integer NOT NULL,
        PRIMARY KEY (id_forum, id_comment),
        FOREIGN KEY (id_forum)
            REFERENCES public.forum (id) MATCH SIMPLE
            ON UPDATE CASCADE
            ON DELETE CASCADE
            NOT VALID,
        FOREIGN KEY (id_comment)
            REFERENCES public.forum_comment (id) MATCH SIMPLE
            ON UPDATE CASCADE
            ON DELETE CASCADE
            NOT VALID
    );
    
    ALTER TABLE IF EXISTS public.forum_comment_list
        OWNER to postgres;




/*scheduler*/
    CREATE TABLE public.scheduler
    (
        id serial NOT NULL,
        name text,
        PRIMARY KEY (id)
    );
    
    ALTER TABLE IF EXISTS public.scheduler
        OWNER to postgres;

    CREATE TABLE public.scheduler_appointment
    (
        id serial NOT NULL,
        teacher_id integer,
        start_time integer,
        duration integer,
        comment text,
        PRIMARY KEY (id)
    );
    
    ALTER TABLE IF EXISTS public.scheduler_appointment
        OWNER to postgres;

    CREATE TABLE public.scheduler_appointment_list
    (
        id_scheduler integer NOT NULL,
        id_appointment integer NOT NULL,
        PRIMARY KEY (id_scheduler, id_appointment),
        FOREIGN KEY (id_scheduler)
            REFERENCES public.scheduler (id) MATCH SIMPLE
            ON UPDATE CASCADE
            ON DELETE CASCADE
            NOT VALID,
        FOREIGN KEY (id_appointment)
            REFERENCES public.scheduler_appointment (id) MATCH SIMPLE
            ON UPDATE CASCADE
            ON DELETE CASCADE
            NOT VALID
    );
    
    ALTER TABLE IF EXISTS public.scheduler_appointment_list
        OWNER to postgres;

/*||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||*/






























